---
- name: Warn if telegram token is not defined
  debug:
    msg: "monitoring_telegram_token is not defined - telegram bot will be removed from docker config"
  when: monitoring_telegram_token is not defined

- name: Warn if monitoring_mail_server token is not defined
  debug:
    msg: "monitoring_mail_server is not defined - mail server will be removed from docker config"
  when: monitoring_mail_server is not defined

- name: Create monitoring folders
  file:
    path: "{{ monitoring_root }}/{{item.path}}"
    state: directory
    mode: "{{ item.mode }}"
  become: true
  loop:
    - { mode: 777, path: "alertmanager-bot-data" }
    - { mode: 777, path: "alertmanager-data" }
    - { mode: 777, path: "alertmanager" }
    - { mode: 777, path: "alertmanager/templates" }
    - { mode: 777, path: "grafana-data" }
    #    - { mode: 777, path: "loki-data" }
    #    - { mode: 777, path: "loki" }
    - { mode: 755, path: "loki/alerts" }
    - { mode: 777, path: "prometheus-data" }
    - { mode: 755, path: "prometheus/" }
    - { mode: 755, path: "prometheus/alerts" }
    - { mode: 755, path: "prometheus/local" }
    - { mode: 755, path: "nginx/conf" }
    - { mode: 777, path: "nginx/log" }
    - { mode: 777, path: "certbot/www" }
    - { mode: 777, path: "certbot/conf" }
    - { mode: 777, path: "certbot/log" }

- name: Set default scrape folder
  set_fact:
    scrape_folders:
      - { path: "{{ environment_name }}" }
  when: scrape_folders is not defined

- name: Print scrape folders
  debug:
    msg: "An item: {{ item.path }}, {{ item.proxy_url | default ('') }}"
  with_items: "{{ scrape_folders }}"

- name: Create custom monitoring folders
  file:
    path: "{{ monitoring_root }}/prometheus/{{ item.path }}"
    state: directory
    mode: "755"
  become: true
  with_items: "{{ scrape_folders }}"

# Create custom scrape folders config
# Use honor_labels: false string when proxy_url is not defined as a workaround
- set_fact:
    scrape_config: |
      {{ scrape_config | default ('') }}
      - job_name: exporters-{{ item.path }}
        scheme: {{ item.scheme | default('http') }}
        metrics_path: {{ item.metrics_path | default('/metrics') }}
        {{ (item.proxy_url is defined) | ternary('proxy_url','honor_labels') }}: {{ (item.proxy_url is defined) | ternary(item.proxy_url,'false') }}
        file_sd_configs:
          - files:
            - './{{ item.path }}/*.yml'
            refresh_interval: {{ monitoring_prometheus_refresh_interval }}
  with_items: "{{ scrape_folders }}"

# Add extra jobs from variable
- set_fact:
    scrape_config: |
      {{ scrape_config }}

      {{ monitoring_extra_jobs | to_yaml }}

  when: monitoring_extra_jobs is defined

- name: Deploy Prometheus configuration files from templates
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ monitoring_root }}/{{ item.dst }}"
    mode: "{{ item.mode }}"
  become: true
  loop:
    - { mode: 644, src: "prometheus/prometheus.yml", dst: "prometheus" }
    - { mode: 644, src: "prometheus/local/localhost.yml", dst: "prometheus/local" }
    - { mode: 644, src: "alertmanager/alertmanager.yml", dst: "alertmanager" }
    #    - { mode: 644, src: "loki/loki-config.yml",             dst: "{{ monitoring_root }}/loki" }
    - { mode: 644, src: "nginx/monitoring.conf", dst: "/nginx/conf" }
    - { mode: 644, src: "docker-compose.yml", dst: "" }
    - { mode: 644, src: ".env", dst: "" }
    - { mode: 755, src: "certbot.sh", dst: "" }
  register: upload_templates

- name: Deploy config files
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ monitoring_root }}/{{ item.dst }}"
    mode: "{{ item.mode }}"
    variable_start_string: "%%"
    variable_end_string: "%%"
  become: true
  loop:
    - {
        mode: 644,
        src: "prometheus/alerts/exporter.yml",
        dst: "prometheus/alerts",
      }
    - {
        mode: 644,
        src: "prometheus/alerts/linux.yml",
        dst: "prometheus/alerts",
      }
    - {
        mode: 644,
        src: "prometheus/alerts/windows.yml",
        dst: "prometheus/alerts",
      }
    #    - { mode: 644, src: "loki/alerts/alerts.yml",           dst: "{{ monitoring_root }}/loki/alerts" }
    - {
        mode: 644,
        src: "alertmanager/templates/telegram.tmpl",
        dst: "alertmanager/templates/",
      }
  register: upload_files

- name: Run certbot to generate certificate if it does not exist
  ansible.builtin.shell: "./certbot.sh"
  args:
    chdir: "{{ monitoring_root }}"
    creates: "{{ monitoring_root }}/certbot/conf/live/{{ monitoring_server_host | default (inventory_hostname) }}/fullchain.pem"
  become: true
  check_mode: no
  register: certbot_gen

- name: Print certbot script output
  debug:
    var: certbot_gen
  when: certbot_gen.changed

- name: Get stats of the certificate file
  ansible.builtin.stat:
    path: "{{ monitoring_root }}/certbot/conf/live/{{ monitoring_server_host | default (inventory_hostname) }}/fullchain.pem"
  become: true
  register: st

- name: Fail if certificate file is missing
  ansible.builtin.fail:
    msg: "Letsencrypt certificate was not generated"
  when: st.stat.exists == false

- name: Generate dhparams.pem for nginx if it not exists
  shell: "openssl dhparam -out {{ monitoring_root }}/nginx/dhparams.pem 2048"
  args:
    creates: "{{ monitoring_root }}/nginx/dhparams.pem"
  check_mode: no
  become: true

- name: Deploy prometheus containers using docker-compose
  community.docker.docker_compose:
    project_src: "{{ monitoring_root }}"
    remove_orphans: yes
    recreate: "smart"
    pull: yes
  become: true

- name: Restart containers if needed
  community.docker.docker_compose:
    project_src: "{{ monitoring_root }}"
    restarted: yes
  become: true
  when: upload_files.changed or upload_templates.changed

- name: Add letsencrypt cronjob for cert renewal
  ansible.builtin.cron:
    name: monitoring_certbot
    weekday: "6"
    minute: "11"
    hour: "23"
    user: root
    job: "cd {{monitoring_root}} && bash ./certbot.sh"
    cron_file: monitoring_certbot
  become: true
